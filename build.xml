<project name="Cumulus" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <!-- Managed Package Versions -->
    <property name="version.npe01" value="2.91" />
    <property name="version.npo02" value="2.93" />
    <property name="version.npe03" value="2.91" />
    <property name="version.npe4" value="2.9" />
    <property name="version.npe5" value="1.90" />

    <!-- Following typedefs and macro definitions are from https://gist.github.com/afawcett/5843110 -->
    <!--   Download from Salesforce Tools page under Setup -->
    <typedef 
        uri="antlib:com.salesforce" 
        resource="com/salesforce/antlib.xml" 
        classpath="${basedir}/lib/ant-salesforce.jar"/>
        
    <!--   Download from http://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ -->
    <taskdef 
        resource="net/sf/antcontrib/antlib.xml" 
        classpath="${basedir}/lib/ant-contrib-1.0b3.jar"
        />  

    <macrodef name="installPackage" description="Installs the given managed package">
        <attribute name="namespace" description="Namespace of managed package to install."/>
        <attribute name="version" description="Version of managed package to install."/>
        <attribute name="packagePassword" description="Password used to install the pacakge. Optional." default=""/>
        <attribute name="username" description="Salesforce user name."/>
        <attribute name="password" description="Salesforce password."/>
        <sequential>
            <!-- Generate optional <password> element? -->
            <if><equals arg1="@{packagePassword}" arg2=""/>
                <then><property name="passwordElement" value=""/></then>
                <else><property name="passwordElement" value="&lt;password&gt;@{packagePassword}&lt;/password&gt;"/></else>
            </if>
            <!-- Generate working folder and metadata files representing the package to install -->
            <delete dir="${basedir}/installdeploy"/>
            <mkdir dir="${basedir}/installdeploy"/>
            <mkdir dir="${basedir}/installdeploy"/>         
            <mkdir dir="${basedir}/installdeploy/installedPackages"/>
            <echo file="${basedir}/installdeploy/package.xml"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata"><types><members>@{namespace}</members><name>InstalledPackage</name></types><version>28.0</version></Package>]]></echo>
            <echo file="${basedir}/installdeploy/installedPackages/@{namespace}.installedPackage"><![CDATA[<InstalledPackage xmlns="http://soap.sforce.com/2006/04/metadata"><versionNumber>@{version}</versionNumber>${passwordElement}</InstalledPackage>]]></echo>
            <sf:deploy deployRoot="${basedir}/installdeploy" username="@{username}" password="@{password}" maxPoll="100" />
            <delete dir="${basedir}/installdeploy"/>
        </sequential>
    </macrodef>
 
    <macrodef name="uninstallPackage" description="Uninstalls the given managed package">
        <attribute name="namespace" description="Namespace of managed package to install."/>
        <attribute name="username" description="Salesforce user name."/>
        <attribute name="password" description="Salesforce password."/>
        <sequential>
            <!-- Generate working folder and metadata files representing the package to uninstall -->       
            <delete dir="${basedir}/installdeploy"/>
            <mkdir dir="${basedir}/installdeploy"/>
            <mkdir dir="${basedir}/installdeploy"/>         
            <mkdir dir="${basedir}/installdeploy/installedPackages"/>
            <echo file="${basedir}/installdeploy/package.xml"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata"><version>28.0</version></Package>]]></echo>
            <echo file="${basedir}/installdeploy/destructiveChanges.xml"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata"><types><members>@{namespace}</members><name>InstalledPackage</name></types><version>28.0</version></Package>]]></echo>
            <echo file="${basedir}/installdeploy/installedPackages/@{namespace}.installedPackage"><![CDATA[<InstalledPackage xmlns="http://soap.sforce.com/2006/04/metadata"><versionNumber>@{version}</versionNumber></InstalledPackage>]]></echo>
            <sf:deploy deployRoot="${basedir}/installdeploy" username="@{username}" password="@{password}" maxPoll="100" />
        </sequential>
    </macrodef>

    <macrodef name="getPackageVersion" description="Sets the InstalledPackage.NAMESPACE.versionNumber property to the version number of the package">
      <attribute name="namespace" description="Package's name to fetch version number for" />
      <attribute name="refresh" default="true" description="Should installedPackages be refreshed from the target org and deleted at the end of execution?" />
      <sequential>
        <!-- If we should refresh the installed packages, refresh them -->
        <if><istrue value="@{refresh}" />
          <then>
            <sf:bulkRetrieve
              username="${sf.username}"
              password="${sf.password}"
              metadataType="InstalledPackage"
              retrieveTarget="${basedir}/installedPackages"/>
          </then>
        </if>

        <if>
          <available file="${basedir}/installedPackages/installedPackages/@{namespace}.installedPackage" />
          <then>
            <!-- replace the string versionNumber with @{namespace}.versionNumber so the property is namespaced when loaded -->
            <replace file="${basedir}/installedPackages/installedPackages/@{namespace}.installedPackage" token="versionNumber" value="@{namespace}.versionNumber" />

            <!-- load the installedPackage file as properties -->
            <xmlproperty file="${basedir}/installedPackages/installedPackages/@{namespace}.installedPackage" />
          </then>
          <else>
            <property name="InstalledPackage.@{namespace}.versionNumber" value="Not Installed" />
          </else>
        </if>

        <if><istrue value="@{refresh}"/>
          <then>
            <delete dir="${basedir}/installedPackages"/>
          </then>
        </if>

      </sequential>
    </macrodef>

    <macrodef name="getPackageNamespaces" description="Gets the namespaces for all dependent packages">
      <sequential>
        <delete dir="${basedir}/installedPackages"/>
        <mkdir dir="${basedir}/installedPackages"/>

        <sf:bulkRetrieve
            username="${sf.username}"
            password="${sf.password}"
            metadataType="InstalledPackage"
            retrieveTarget="${basedir}/installedPackages"/>

        <getPackageVersion namespace="npe01" refresh="false" />
        <getPackageVersion namespace="npo02" refresh="false" />
        <getPackageVersion namespace="npe03" refresh="false" />
        <getPackageVersion namespace="npe4" refresh="false" />
        <getPackageVersion namespace="npe5" refresh="false" />

        <echo>Dependent Package Versions:
-------------------------------
npe01: ${InstalledPackage.npe01.versionNumber}
npo02: ${InstalledPackage.npo02.versionNumber}
npe03: ${InstalledPackage.npe03.versionNumber}
npe4: ${InstalledPackage.npe4.versionNumber}
npe5: ${InstalledPackage.npe5.versionNumber}
        </echo>

        <delete dir="${basedir}/installedPackages"/>

      </sequential>
    </macrodef>

    <macrodef name="updateDependentPackages">
      <sequential>
        <getPackageNamespaces />

        <!-- npo02 depends on npe01 so we have to uninstall npo02 first if needed -->
        <if>
          <and>
            <or>
              <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="${version.npo02}" /></not>
              <!-- If the npo02 version is correct but npe01 needs a reinstall, we have to uninstall npo02 first -->
              <not><equals arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" /></not>
            </or>
            <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="Not Installed" /></not>
          </and>
          <then>
            <uninstallPackage namespace="npo02" username="${sf.username}" password="${sf.password}"/>
          </then>
        </if>

        <!-- reinstall npe01 if version doesn't match -->
        <if>
          <not><equals arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" /></not>
          <then>
            <echo>Changing npe01 from ${InstalledPackage.npe01.versionNumber} to ${version.npe01}</echo>
            <if>
              <!-- only uninstall if package exists -->
              <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="Not Installed" /></not>
              <then>
                <uninstallPackage namespace="npe01" username="${sf.username}" password="${sf.password}"/>
              </then> 
            </if>
            <installPackage namespace="npe01" version="${version.npe01}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

        <!-- npo02 depends on npe01 so we have to install it after npe01 if needed -->
        <if>
          <or>
            <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="${version.npo02}" /></not>
            <not><equals arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" /></not>
          </or>
          <then>
            <echo>Changing npo02 from ${InstalledPackage.npo02.versionNumber} to ${version.npo02}</echo>
            <installPackage namespace="npo02" version="${version.npo02}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

        <!-- reinstall npe03 if version doesn't match -->
        <if>
          <not><equals arg1="${InstalledPackage.npe03.versionNumber}" arg2="${version.npe03}" /></not>
          <then>
            <echo>Changing npe03 from ${InstalledPackage.npe03.versionNumber} to ${version.npe03}</echo>
            <if>
              <!-- only uninstall if package exists -->
              <not><equals arg1="${InstalledPackage.npe03.versionNumber}" arg2="Not Installed" /></not>
              <then>
                <uninstallPackage namespace="npe03" username="${sf.username}" password="${sf.password}"/>
              </then> 
            </if>
            <installPackage namespace="npe03" version="${version.npe03}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

        <!-- reinstall npe4 if version doesn't match -->
        <if>
          <not><equals arg1="${InstalledPackage.npe4.versionNumber}" arg2="${version.npe4}" /></not>
          <then>
            <echo>Changing npe4 from ${InstalledPackage.npe4.versionNumber} to ${version.npe4}</echo>
            <if>
              <!-- only uninstall if package exists -->
              <not><equals arg1="${InstalledPackage.npe4.versionNumber}" arg2="Not Installed" /></not>
              <then>
                <uninstallPackage namespace="npe4" username="${sf.username}" password="${sf.password}"/>
              </then> 
            </if>
            <installPackage namespace="npe4" version="${version.npe4}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

        <!-- reinstall npe5 if version doesn't match -->
        <if>
          <not><equals arg1="${InstalledPackage.npe5.versionNumber}" arg2="${version.npe5}" /></not>
          <then>
            <echo>Changing npe5 from ${InstalledPackage.npe5.versionNumber} to ${version.npe5}</echo>
            <if>
              <!-- only uninstall if package exists -->
              <not><equals arg1="${InstalledPackage.npe5.versionNumber}" arg2="Not Installed" /></not>
              <then>
                <uninstallPackage namespace="npe5" username="${sf.username}" password="${sf.password}"/>
              </then> 
            </if>
            <installPackage namespace="npe5" version="${version.npe5}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

      </sequential>
    </macrodef>

    <!-- Actual Cumulus Build Targets -->
    <macrodef name="uninstallDependentPackages" description="Uninstalls all Cumulus dependent packages">
      <sequential>
        <uninstallPackage namespace="npo02" username="${sf.username}" password="${sf.password}"/>
        <uninstallPackage namespace="npe01" username="${sf.username}" password="${sf.password}"/> 
        <uninstallPackage namespace="npe03" username="${sf.username}" password="${sf.password}"/> 
        <uninstallPackage namespace="npe4" username="${sf.username}" password="${sf.password}"/> 
        <uninstallPackage namespace="npe5" username="${sf.username}" password="${sf.password}"/> 
      </sequential>
    </macrodef>

    <macrodef name="installDependentPackages" description="Installs the required version of all Cumulus dependent packages">
      <sequential>
        <installPackage namespace="npe01" version="2.91" username="${sf.username}" password="${sf.password}"/> 
        <installPackage namespace="npo02" version="2.93" username="${sf.username}" password="${sf.password}"/> 
        <installPackage namespace="npe03" version="2.91" username="${sf.username}" password="${sf.password}"/> 
        <installPackage namespace="npe4" version="2.9" username="${sf.username}" password="${sf.password}"/> 
        <installPackage namespace="npe5" version="1.90" username="${sf.username}" password="${sf.password}"/> 
      </sequential>
    </macrodef>

    <!--   test: Run a checkOnly deployment which runs all tests but never actually deploys the package permanently.  Updates all dependent packages to the correct version which is permanent --> 
    <target name="test">
      <updateDependentPackages />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" checkOnly="true" maxPoll="100" />
    </target>

    <!--   deploy: Run a full deployment including running all tests -->
    <target name="deploy">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" maxPoll="100" />
    </target>

    <!--   deployWithoutTests: Run a full deployment but don't run all tests.  This is useful if you already know tests will pass from previous runs and just want to deploy faster -->
    <target name="deployWithoutTest">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="false" maxPoll="100" />
    </target>

    <!--   updateDependendentPackages: Ensures all dependent packages are the correct version -->
    <target name="updateDependentPackages">
      <updateDependentPackages />
    </target>

</project>
