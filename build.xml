<project name="Cumulus" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <taskdef uri="antlib:com.salesforce"
         resource="com/salesforce/antlib.xml"
         classpath="lib/ant-salesforce.jar"/>

    <include file="${basedir}/lib/ant-salesforce.xml" />

    <!-- Managed Package Versions -->
    <property name="version.npe01" value="2.91" />
    <property name="version.npo02" value="2.95" />
    <property name="version.npe03" value="2.91" />
    <property name="version.npe4" value="2.9" />
    <property name="version.npe5" value="1.90" />

    <!-- Cumulus specific macros -->
    <macrodef name="getPackageNamespaces" description="Gets the namespaces for all dependent packages">
      <sequential>
        <delete dir="${basedir}/installedPackages"/>
        <mkdir dir="${basedir}/installedPackages"/>

        <sf:bulkRetrieve
            username="${sf.username}"
            password="${sf.password}"
            metadataType="InstalledPackage"
            retrieveTarget="${basedir}/installedPackages"/>

        <getPackageVersion namespace="npe01" refresh="false" />
        <getPackageVersion namespace="npo02" refresh="false" />
        <getPackageVersion namespace="npe03" refresh="false" />
        <getPackageVersion namespace="npe4" refresh="false" />
        <getPackageVersion namespace="npe5" refresh="false" />

        <echo>Dependent Package Versions:
-------------------------------
npe01: ${InstalledPackage.npe01.versionNumber}
npo02: ${InstalledPackage.npo02.versionNumber}
npe03: ${InstalledPackage.npe03.versionNumber}
npe4: ${InstalledPackage.npe4.versionNumber}
npe5: ${InstalledPackage.npe5.versionNumber}
        </echo>

        <delete dir="${basedir}/installedPackages"/>

      </sequential>
    </macrodef>


    <macrodef name="updateDependentPackages">
      <sequential>
        <getPackageNamespaces />

        <!-- npo02 depends on npe01 so we have to uninstall npo02 first if needed -->
        <if>
          <and>
            <or>
              <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="${version.npo02}" /></not>
              <!-- If the npo02 version is correct but npe01 needs a reinstall, we have to uninstall npo02 first -->
              <not><equals arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" /></not>
            </or>
            <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="Not Installed" /></not>
          </and>
          <then>
            <uninstallPackage namespace="npo02" username="${sf.username}" password="${sf.password}"/>
          </then>
        </if>

        <!-- reinstall npe01 if version doesn't match -->
        <if>
          <not><equals arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" /></not>
          <then>
            <echo>Changing npe01 from ${InstalledPackage.npe01.versionNumber} to ${version.npe01}</echo>
            <if>
              <!-- only uninstall if package exists -->
              <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="Not Installed" /></not>
              <then>
                <uninstallPackage namespace="npe01" username="${sf.username}" password="${sf.password}"/>
              </then> 
            </if>
            <installPackage namespace="npe01" version="${version.npe01}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

        <!-- npo02 depends on npe01 so we have to install it after npe01 if needed -->
        <if>
          <or>
            <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="${version.npo02}" /></not>
            <not><equals arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" /></not>
          </or>
          <then>
            <echo>Changing npo02 from ${InstalledPackage.npo02.versionNumber} to ${version.npo02}</echo>
            <installPackage namespace="npo02" version="${version.npo02}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

        <!-- reinstall npe03 if version doesn't match -->
        <if>
          <not><equals arg1="${InstalledPackage.npe03.versionNumber}" arg2="${version.npe03}" /></not>
          <then>
            <echo>Changing npe03 from ${InstalledPackage.npe03.versionNumber} to ${version.npe03}</echo>
            <if>
              <!-- only uninstall if package exists -->
              <not><equals arg1="${InstalledPackage.npe03.versionNumber}" arg2="Not Installed" /></not>
              <then>
                <uninstallPackage namespace="npe03" username="${sf.username}" password="${sf.password}"/>
              </then> 
            </if>
            <installPackage namespace="npe03" version="${version.npe03}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

        <!-- reinstall npe4 if version doesn't match -->
        <if>
          <not><equals arg1="${InstalledPackage.npe4.versionNumber}" arg2="${version.npe4}" /></not>
          <then>
            <echo>Changing npe4 from ${InstalledPackage.npe4.versionNumber} to ${version.npe4}</echo>
            <if>
              <!-- only uninstall if package exists -->
              <not><equals arg1="${InstalledPackage.npe4.versionNumber}" arg2="Not Installed" /></not>
              <then>
                <uninstallPackage namespace="npe4" username="${sf.username}" password="${sf.password}"/>
              </then> 
            </if>
            <installPackage namespace="npe4" version="${version.npe4}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

        <!-- reinstall npe5 if version doesn't match -->
        <if>
          <not><equals arg1="${InstalledPackage.npe5.versionNumber}" arg2="${version.npe5}" /></not>
          <then>
            <echo>Changing npe5 from ${InstalledPackage.npe5.versionNumber} to ${version.npe5}</echo>
            <if>
              <!-- only uninstall if package exists -->
              <not><equals arg1="${InstalledPackage.npe5.versionNumber}" arg2="Not Installed" /></not>
              <then>
                <uninstallPackage namespace="npe5" username="${sf.username}" password="${sf.password}"/>
              </then> 
            </if>
            <installPackage namespace="npe5" version="${version.npe5}" username="${sf.username}" password="${sf.password}"/> 
          </then>
        </if>

      </sequential>
    </macrodef>


    <!-- Cumulus build targets -->

    <!--   test: Run a checkOnly deployment which runs all tests but never actually deploys the package permanently.  Updates all dependent packages to the correct version which is permanent --> 
    <target name="test">
      <updateDependentPackages />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" checkOnly="true" maxPoll="200" />
    </target>

    <!--   deploy: Run a full deployment including running all tests -->
    <target name="deploy">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" maxPoll="200" />
    </target>

    <!--   deployWithoutTests: Run a full deployment but don't run all tests.  This is useful if you already know tests will pass from previous runs and just want to deploy faster -->
    <target name="deployWithoutTest">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="false" maxPoll="200" />
    </target>

    <!--   updateDependendentPackages: Ensures all dependent packages are the correct version -->
    <target name="updateDependentPackages">
      <updateDependentPackages />
    </target>

    <target name="describeMetadata">
      <sf:describeMetadata username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" resultFilePath="describeMetadata/describe.log"/>
    </target>

    <target name="retrieveUnpackaged">
      <delete dir="projectFolder" />
      <mkdir dir="projectFolder"/>
      <mkdir dir="projectFolder/unpackaged"/>
      <mkdir dir="projectFolder/standard"/>
      <sf:retrieve 
        username="${sf.username}" 
        password="${sf.password}" 
        serverurl="${sf.serverurl}" 
        retrieveTarget="projectFolder/standard" 
        unpackaged="lib/standard_objects.xml"/>
      <sf:retrieve 
        username="${sf.username}" 
        password="${sf.password}" 
        serverurl="${sf.serverurl}" 
        retrieveTarget="projectFolder/unpackaged" 
        unpackaged="lib/all_meta_types.xml"/>

      <delete file="projectFolder/unpackaged/applications/Force_com.app" />
    </target>

    <target name="buildDestructiveChanges">
      <!-- Ant doesn't like < in replace tokens or values so set a property with < via cdata for reuse later -->
      <property name="lt"><![CDATA[<]]></property>

      <delete dir="uninstall" />
      <mkdir dir="uninstall" />
      <mkdir dir="uninstall/standard" />
      <mkdir dir="uninstall/unpackaged" />
      <property name="destxml" value="uninstall/unpackaged/destructiveChanges.xml" />

      <echo file="uninstall/unpackaged/package.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
<version>25.0</version>
</Package>]]></echo>

      <echo file="${destxml}">&lt;?xml version="1.0" encoding="UTF-8"?&gt;${line.separator}</echo>
      <echo file="${destxml}" append="true">&lt;Package xmlns="http://soap.sforce.com/2006/04/metadata"&gt;${line.separator}</echo>
      <for param="typedir">
        <path>
          <dirset dir="projectFolder/unpackaged" includes="**/*" />
        </path>
        <sequential>
          <basename property="metatype" file="@{typedir}" />

          <var name="typename" unset="true" /> 
          <switch value="${metatype}">
            <case value="applications">
              <property name="typename" value="CustomApplication" />
            </case>
            <case value="classes">
              <property name="typename" value="ApexClass" />
            </case>
            <case value="components">
              <property name="typename" value="ApexComponent" />
            </case>
            <case value="objects">
              <property name="typename" value="CustomObject" />
            </case>
            <case value="pages">
              <property name="typename" value="ApexPage" />
            </case>
            <case value="staticresources">
              <property name="typename" value="StaticResource" />
            </case>
            <case value="tabs">
              <property name="typename" value="CustomTab" />
            </case>
            <case value="triggers">
              <property name="typename" value="ApexTrigger" />
            </case>
            <default/>
          </switch>

          <if>
            <isset property="typename" />
            <then>

              <echo file="${destxml}" append="true">  &lt;types&gt;${line.separator}</echo>
              <for param="file">
                <path>
                  <fileset dir="@{typedir}" includes="**/*" excludes="*.xml" />
                </path>
                <sequential>
                  <basename property="component_file" file="@{file}" />
                  <propertyregex property="component" input="${component_file}" regexp="(.*)\.(.*)" select="\1" />
                  <echo file="${destxml}" append="true">    &lt;members&gt;${component}&lt;/members&gt;${line.separator}</echo>
                  <var name="component" unset="true" />
                  <var name="component_file" unset="true" />
                </sequential>
              </for>
              <echo file="${destxml}" append="true">    &lt;name&gt;${typename}&lt;/name&gt;${line.separator}</echo>
              <echo file="${destxml}" append="true">  &lt;/types&gt;${line.separator}</echo>

            </then>

          </if>

          <var name="metatype" unset="true" />
        </sequential>
      </for>

      <echo file="${destxml}" append="true">  &lt;version&gt;29.0&lt;/version&gt;${line.separator}</echo>
      <echo file="${destxml}" append="true">&lt;/Package&gt;</echo>
      
      <copy file="projectFolder/standard/package.xml" todir="uninstall/standard" />
      <mkdir dir="uninstall/standard/objects" />
      <for param="file">
        <path>
          <fileset dir="projectFolder/standard/objects" includes="**/*.object" />
        </path>
        <sequential>
          <basename property="obj_file" file="@{file}" />
          <basename property="object" file="@{file}" suffix=".object" />

          <xslt in="@{file}" out="uninstall/standard/objects/${obj_file}" style="lib/remove_action_overrides.xsl" />

          <xslt in="@{file}" out="uninstall/standard/objects/${obj_file}.fields" style="lib/extract_stdobj_custom_fields.xsl" />
          <replaceregexp file="uninstall/standard/objects/${obj_file}.fields" match="members>(.*)./members>" replace="members>${object}.\1&lt;/members>${line.separator}" flags="g" />

          <xslt in="@{file}" out="uninstall/standard/objects/${obj_file}.fieldsets" style="lib/extract_stdobj_fieldsets.xsl" />
          <replaceregexp file="uninstall/standard/objects/${obj_file}.fieldsets" match="members>(.*)./members>" replace="members>${object}.\1&lt;/members>${line.separator}" flags="g" />
          
          <var name="object" unset="true" />
          <var name="obj_file" unset="true" />
        </sequential>
      </for>

      <!-- Add standard object fields to destructiveChanges.xml -->
      <concat destfile="uninstall/standard/objects/fields.destroy">
          <fileset dir="uninstall/standard/objects" includes="**/*.object.fields" />
          <filterchain>
              <linecontains>
                  <contains value="members>" />
              </linecontains>
          </filterchain>
      </concat>
      <loadfile property="fields.destroy" srcfile="uninstall/standard/objects/fields.destroy" />
      <var name="fields.destroy" value="${line.separator}${lt}types>${line.separator}${fields.destroy}${lt}name>CustomField${lt}/name>${line.separator}${lt}/types>${line.separator}" />
      <!--
      <delete>
          <fileset dir="uninstall/standard/objects" includes="**/*.fields" />
      </delete>
      -->
      <if>
        <isset property="fields.destroy" />
        <then>
          <replaceregexp file="${destxml}" match="Package(.*)>" replace="Package\1>${fields.destroy}" />
        </then>
      </if>

      <!-- Add standard object fieldsets to destructiveChanges.xml -->
      <concat destfile="uninstall/standard/objects/fieldsets.destroy">
          <fileset dir="uninstall/standard/objects" includes="**/*.object.fieldsets" />
          <filterchain>
              <linecontains>
                  <contains value="members>" />
              </linecontains>
          </filterchain>
      </concat>
      <loadfile property="fieldsets.destroy" srcfile="uninstall/standard/objects/fieldsets.destroy" />
      <var name="fieldsets.destroy" value="${line.separator}${lt}types>${line.separator}${fieldsets.destroy}${lt}name>FieldSet${lt}/name>${line.separator}${lt}/types>${line.separator}" />
      <!--
      <delete>
          <fileset dir="uninstall/standard/objects" includes="**/*.fieldsets" />
      </delete>
      -->
      <if>
        <isset property="fieldsets.destroy" /> 
        <then>
          <replaceregexp file="${destxml}" match="Package(.*)>" replace="Package\1>${fieldsets.destroy}" />
        </then>
      </if>


    </target>

    <target name="uninstallCumulus">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall/standard" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall/unpackaged" purgeOnDelete="true" />
    </target>

    <target name="cleanStandardObjs">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="projectFolder/standard" purgeOnDelete="true" />
    </target>

    <target name="uninstallDependentPackages">
      <uninstallPackage namespace="npo02" username="${sf.username}" password="${sf.password}"/>
      <uninstallPackage namespace="npe01" username="${sf.username}" password="${sf.password}"/>
      <uninstallPackage namespace="npe03" username="${sf.username}" password="${sf.password}"/>
      <uninstallPackage namespace="npe4" username="${sf.username}" password="${sf.password}"/>
      <uninstallPackage namespace="npe5" username="${sf.username}" password="${sf.password}"/>
    </target>

</project>
