<project name="Cumulus" default="deploy" basedir="." xmlns:sf="antlib:com.salesforce">
<!--
    <taskdef uri="antlib:com.salesforce"
         resource="com/salesforce/antlib.xml"
         classpath="${basedir}/lib/ant-salesforce.jar" />
-->
    <include file="${basedir}/lib/ant-salesforce.xml" />

    <taskdef 
         resource="net/sf/antcontrib/antlib.xml"
         classpath="${basedir}/lib/ant-contrib-1.0b2.jar" />

    <property name="version.npe01" value="2.95" />
    <property name="version.npo02" value="2.96" />
    <property name="version.npe03" value="2.92" />
    <property name="version.npe4" value="2.91" />
    <property name="version.npe5" value="1.92" />


    <!-- Cumulus specific macros -->


    <macrodef name="getPackageNamespaces" description="Gets the namespaces for all dependent packages">
      <sequential>
        <delete dir="${basedir}/installedPackages"/>
        <mkdir dir="${basedir}/installedPackages"/>

        <sf:bulkRetrieve
            username="${sf.username}"
            password="${sf.password}"
            metadataType="InstalledPackage"
            retrieveTarget="${basedir}/installedPackages"/>

        <getPackageVersion namespace="npe01" refresh="false" />
        <getPackageVersion namespace="npo02" refresh="false" />
        <getPackageVersion namespace="npe03" refresh="false" />
        <getPackageVersion namespace="npe4" refresh="false" />
        <getPackageVersion namespace="npe5" refresh="false" />

        <echo>Dependent Package Versions:
-------------------------------
npe01: ${InstalledPackage.npe01.versionNumber} (${version.npe01} required)
npo02: ${InstalledPackage.npo02.versionNumber} (${version.npo02} required)
npe03: ${InstalledPackage.npe03.versionNumber} (${version.npe03} required)
npe4: ${InstalledPackage.npe4.versionNumber} (${version.npe4} required)
npe5: ${InstalledPackage.npe5.versionNumber} (${version.npe5} required)
        </echo>

        <delete dir="${basedir}/installedPackages"/>

      </sequential>
    </macrodef>


    <macrodef name="updateDependentPackages">
      <sequential>
        <getPackageNamespaces />

        <!-- npo02 depends on npe01 so we have to uninstall npo02 first if npo02 needs downgraded -->
        <if>
          <and>
            <!-- npo02 is installed -->
            <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="Not Installed" /></not>
            <!-- and npe01 need downgraded -->
            <bool><isgreaterthan arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" /></bool>
          </and>  
          <then>
            <echo>Uninstalling npo02 ${InstalledPackage.npe01.versionNumber} to allow for npe01 downgrade</echo>
            <uninstallPackage namespace="npo02" username="${sf.username}" password="${sf.password}" />

            <!-- Override the cached installed version of npo02 so we don't have to fetch versions again -->
            <var name="InstalledPackage.npo02.versionNumber" value="Not Installed" />
          </then>
        </if>

        <updatePackageVersion namespace="npe01" version="${version.npe01}" />
        <updatePackageVersion namespace="npo02" version="${version.npo02}" />
        <updatePackageVersion namespace="npe03" version="${version.npe03}" />
        <updatePackageVersion namespace="npe4" version="${version.npe4}" />
        <updatePackageVersion namespace="npe5" version="${version.npe5}" />

      </sequential>
    </macrodef>


    <!-- Cumulus Build Targets -->


    <!-- deploy: Run a full deployment including running all tests.  Does not attempt to clean target org or ensure dependent package versions are correct -->
    <target name="deploy">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" maxPoll="200" />
    </target>

    <!-- deployWithoutTests: Run a full deployment but don't run all tests.  This is useful if you already know tests will pass from previous runs and just want to deploy faster -->
    <target name="deployWithoutTest">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="false" maxPoll="200" />
    </target>

    <!-- deployCI: Does a full build including uninstalling previously deployed unpackaged code, updating managed package versions, and then deploying Cumulus with all tests --> 
    <!-- !!!WARNING!!!: DO NOT run this against a real production org as it will delete everything.  It is designed to clear the target org to ensure a clean build test. -->
    <target name="deployCI">
      <!-- First, uninstall all unpackaged code from the target org.  We have to do this first so we can uninstall and reinstall any managed packages not at the right version -->
      <antcall target="uninstallCumulus" />

      <!-- Update any managed packages which are not at the right version -->
      <updateDependentPackages />

      <!-- Do a deployment without tests.  FIXME: This seems to be necessary to stop tests from failing on AFFL_Affiliations.insertAffiliations and may be a platform bug -->
      <!--<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="false" maxPoll="200" />-->

      <!-- Finally, do a deploy with all tests -->
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" maxPoll="200" />
    </target>

    <!-- uninstallCumulus: Removes all non-standard unpackaged metadata from the org for the metadata types used in Cumulus -->
    <target name="uninstallCumulus">
      <retrieveUnpackaged dir="uninstallsrc" />
      <buildDestructiveChanges srcdir="uninstallsrc" dir="uninstall" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall/standard" runAllTests="false" maxPoll="200" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall/unpackaged" runAllTests="false" purgeOnDelete="true" maxPoll="200" />
    </target>


    <!--   updateDependendentPackages: Ensures all dependent packages are the correct version -->
    <target name="updateDependentPackages">
      <updateDependentPackages />
    </target>

    <!-- FIXME: Temporary target to allow feature branch to pass current Jenkins job config.  Remove this after the new build process is in place. -->
    <target name="test">
      <antcall target="deployCI" />
      <antcall target="uninstallCumulus" />
    </target>

</project>
