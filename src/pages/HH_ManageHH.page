<apex:page standardController="Account" extensions="HH_ManageHH_CTRL" standardStylesheets="false" showHeader="true" docType="html-5.0"  >
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <apex:includeLightning />
        <apex:stylesheet value="{!URLFOR($Resource.SLDS, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
    	<apex:stylesheet value="{!URLFOR($Resource.CumulusStaticResources, '/npsp-slds/npsp-common.css')}" />
		<apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/jquery/jquery-1.10.2.min.js')}"/>
		<apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/jquery/jquery-migrate-1.2.1.min.js')}"/>
		<apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/jquery-ui/jquery-ui-1.10.4.min.js')}"/>
        
        <style>       
            .required {
                padding-left: 2px;
                color: red;
                font-weight: 700;
            }
        </style>
                
        <!-- start with a spinner here until lightning loads -->
        <div class="slds initialSpinner">
            <div class="slds-spinner_container">
                <div class="slds-spinner--brand slds-spinner slds-spinner--medium" style="position:fixed;top:30%;" aria-hidden="false" role="alert">
                    <div class="slds-spinner__dot-a"></div>
                    <div class="slds-spinner__dot-b"></div>
                </div>
            </div>  
        </div>

        <!-- used to display any save errors from the Visualforce page's fieldset -->
        <apex:outputPanel id="panelErrors">
            <c:UTIL_PageMessages />
        </apex:outputPanel>
        
        <!-- the location that will hold our lightning component -->
        <div id="lightning" />       
      
        <!-- household fields section (using fieldset that Lightning does not yet support) -->
        <apex:form id="vfForm" >
            <div class="slds">
                <div class="slds-grid slds-grid--align-spread slds-m-around--medium">
                    <div class="slds-form--stacked" style="width:80%" >                        
                        <apex:repeat value="{!$ObjectType.Account.FieldSets.Manage_Household_Custom}" var="f">
                            <div class="slds-form-element">
                                <label class="slds-form-element__label uiLabel-left form-element__label uiLabel" >
                                    {!f.Label}<span class="required">{!IF(f.DBRequired || f.Required, '*', '')}</span>
                                </label>
                                <div class="slds-form-element__control">                                
                                    <apex:inputField required="{!f.DBRequired || f.Required}" value="{!hh[f]}" label="" 
                                    	styleClass="{!CASE(f.Type, 
                                                    	'reference', 'lookupInput' + ' ' + f.FieldPath, 
                                                    	'multipicklist', 'slds-select multipicklistSLDSFixup', 
                                                    	'boolean', 'slds-checkbox',
                                                    	'slds-input')}" />                                
                                </div>
                            </div>
                        </apex:repeat>
                    </div>
                </div>                
            </div>
			
			<!-- we expose a javascript function our lightning component can call to save the vf fieldset & close the page -->            
            <apex:actionFunction action="{!save}" name="saveAndCloseVisualforce" />
        </apex:form>
        
    </html>
    
    <script>
    var j$ = jQuery.noConflict();
    
    var hhId = '{!hhId}';
    $Lightning.use("c:ManageHHApp", function() {
        $Lightning.createComponent("c:HH_Container", 
                                   { hhId : hhId },
                                   "lightning",
                                   function(cmp) {
                                       // after lightning is loaded, do what we need to do here!
                                       
                                       // hide our startup spinner
                                       // actually, let our lightning component hide it when it's completely done loading!
                                       // j$('.initialSpinner').hide();
                                       
                                       // this hack is to prevent the normal apex:inputField of a multiselect picklist
                                       // behavior of hiding the normal select control and using a table with 2 selects
                                       // and 2 buttons.  under SLDS, we could not get this more complicated control to
                                       // style reasonably, so we just hide the table and force showing the original select!
                                       j$('.multipicklistSLDSFixup').show();
                                       j$('.multiSelectPicklistTable').hide();
                                       
                                       // need to remove focus from the visualforce page
                                       // or else our Contact Card checkboxes won't work on single click!
                                       document.activeElement.blur();
                                   }
                                  );
    }); 
    
    // called by our lightning component when it needs to tell the visualforce page 
    // a contact has been removed from the page.  Ideally we'd have the visualforce page
    // handle the c:HH_ContactDeleteEvent, but we haven't yet found info on how to have
    // a visualforce javascript lightning event handler.
    function contactRemoved(con) {
        // if the contact being removed (deleted or moved) is the
        // HH's primary contact, clear out that field.
        var ctrlPC = j$('.npe01__One2OneContact__c');
        if (ctrlPC != null && ctrlPC.val() == con.FirstName + ' ' + con.LastName)
            ctrlPC.val(null);
    }
    
    </script>
    
</apex:page>